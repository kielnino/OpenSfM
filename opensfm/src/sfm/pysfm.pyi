# Autogenerated by pybind stub generator
# Do not manually edit
# To regenerate:
#   $ buck run //mapillary/opensfm/opensfm/src/sfm:pysfm_stubgen
# @generated
#
# Tip: Be sure to run this with the build mode you use for your project, e.g.,
# @//arvr/mode/linux/opt (or dev) in arvr.
#
# Ignore errors for [24] untyped generics.
# pyre-ignore-all-errors[24]

import opensfm.pybundle
import opensfm.pygeometry
import opensfm.pymap
from typing import *

__all__ = [
    "BAHelpers",
    "StaticExtensionLoader",
    "add_connections",
    "count_tracks_per_shot",
    "filter_badly_conditioned_points",
    "realign_maps",
    "remove_connections",
    "remove_isolated_points",
]

class BAHelpers:
    @staticmethod
    def add_gcp_to_bundle(
        arg0: opensfm.pybundle.BundleAdjuster,
        arg1: opensfm.pymap.Map,
        arg2: list[opensfm.pymap.GroundControlPoint],
        arg3: dict,
    ) -> int: ...
    @staticmethod
    def bundle(
        arg0: opensfm.pymap.Map,
        arg1: dict[str, opensfm.pygeometry.Camera],
        arg2: dict[str, opensfm.pymap.RigCamera],
        arg3: list[opensfm.pymap.GroundControlPoint],
        arg4: dict,
    ) -> dict: ...
    @staticmethod
    def bundle_local(
        arg0: opensfm.pymap.Map,
        arg1: dict[str, opensfm.pygeometry.Camera],
        arg2: dict[str, opensfm.pymap.RigCamera],
        arg3: list[opensfm.pymap.GroundControlPoint],
        arg4: str,
        arg5: dict,
    ) -> tuple: ...
    @staticmethod
    def bundle_shot_poses(
        arg0: opensfm.pymap.Map,
        arg1: set[str],
        arg2: dict[str, opensfm.pygeometry.Camera],
        arg3: dict[str, opensfm.pymap.RigCamera],
        arg4: dict,
    ) -> dict: ...
    @staticmethod
    def bundle_to_map(
        arg0: opensfm.pybundle.BundleAdjuster, arg1: opensfm.pymap.Map, arg2: bool
    ) -> None: ...
    @staticmethod
    def detect_alignment_constraints(
        arg0: opensfm.pymap.Map,
        arg1: dict,
        arg2: list[opensfm.pymap.GroundControlPoint],
    ) -> str: ...
    @staticmethod
    def shot_neighborhood_ids(
        arg0: opensfm.pymap.Map, arg1: str, arg2: int, arg3: int, arg4: int
    ) -> tuple[set[str], set[str]]: ...

class StaticExtensionLoader:
    pass

def add_connections(
    arg0: opensfm.pymap.TracksManager, arg1: str, arg2: list[str]
) -> None: ...
def count_tracks_per_shot(
    arg0: opensfm.pymap.TracksManager, arg1: list[str], arg2: list[str]
) -> dict[str, int]: ...
def filter_badly_conditioned_points(
    map: opensfm.pymap.Map, min_angle_deg: float = 1.0, min_abs_det: float = 1e-15
) -> int: ...
def realign_maps(
    arg0: opensfm.pymap.Map, arg1: opensfm.pymap.Map, arg2: bool
) -> None: ...
def remove_connections(
    arg0: opensfm.pymap.TracksManager, arg1: str, arg2: list[str]
) -> None: ...
def remove_isolated_points(map: opensfm.pymap.Map, k: int = 7) -> int: ...
