# Autogenerated by pybind stub generator
# Do not manually edit
# To regenerate:
#   $ buck run //mapillary/opensfm/opensfm/src/dense:pydense_stubgen
# @generated
#
# Tip: Be sure to run this with the build mode you use for your project, e.g.,
# @//arvr/mode/linux/opt (or dev) in arvr.
#
# Ignore errors for [24] untyped generics.
# pyre-ignore-all-errors[24]

import numpy
from typing import *

__all__ = [
    "DepthmapCleaner",
    "DepthmapEstimator",
    "DepthmapPruner",
    "OpenMVSExporter",
    "StaticExtensionLoader",
]

class DepthmapCleaner:
    def __init__(self) -> None: ...
    def add_view(
        self,
        arg0: numpy.typing.NDArray,
        arg1: numpy.typing.NDArray,
        arg2: numpy.typing.NDArray,
        arg3: numpy.typing.NDArray,
    ) -> None: ...
    def clean(self) -> numpy.typing.NDArray: ...
    def set_min_consistent_views(self, arg0: int) -> None: ...
    def set_same_depth_threshold(self, arg0: float) -> None: ...

class DepthmapEstimator:
    def __init__(self) -> None: ...
    def add_view(
        self,
        arg0: numpy.typing.NDArray,
        arg1: numpy.typing.NDArray,
        arg2: numpy.typing.NDArray,
        arg3: numpy.typing.NDArray,
        arg4: numpy.typing.NDArray,
    ) -> None: ...
    def compute_brute_force(self) -> list: ...
    def compute_patch_match(self) -> list: ...
    def compute_patch_match_sample(self) -> list: ...
    def set_depth_range(self, arg0: float, arg1: float, arg2: int) -> None: ...
    def set_min_patch_sd(self, arg0: float) -> None: ...
    def set_patch_size(self, arg0: int) -> None: ...
    def set_patchmatch_iterations(self, arg0: int) -> None: ...

class DepthmapPruner:
    def __init__(self) -> None: ...
    def add_view(
        self,
        arg0: numpy.typing.NDArray,
        arg1: numpy.typing.NDArray,
        arg2: numpy.typing.NDArray,
        arg3: numpy.typing.NDArray,
        arg4: numpy.typing.NDArray,
        arg5: numpy.typing.NDArray,
        arg6: numpy.typing.NDArray,
    ) -> None: ...
    def prune(self) -> list: ...
    def set_same_depth_threshold(self, arg0: float) -> None: ...

class OpenMVSExporter:
    def __init__(self) -> None: ...
    def add_camera(
        self, arg0: str, arg1: numpy.typing.NDArray, arg2: int, arg3: int
    ) -> None: ...
    def add_point(self, arg0: numpy.typing.NDArray, arg1: list) -> None: ...
    def add_shot(
        self,
        arg0: str,
        arg1: str,
        arg2: str,
        arg3: str,
        arg4: numpy.typing.NDArray,
        arg5: numpy.typing.NDArray,
    ) -> None: ...
    def export(self, arg0: str) -> None: ...

class StaticExtensionLoader:
    pass
